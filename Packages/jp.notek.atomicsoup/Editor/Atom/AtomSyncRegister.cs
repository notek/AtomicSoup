#if !COMPILER_UDONSHARP && UNITY_EDITOR
using System.Linq;
using System.Reflection;
using System.IO;
using System.Text;
using UnityEditor;
using UnityEngine;
using VRC.Udon.Serialization.OdinSerializer.Utilities;
using UdonSharp;

namespace JP.Notek.AtomicSoup.Editor
{
    [InitializeOnLoad]
    public class AtomSyncRegister
    {

        static AtomSyncRegister()
        {
            EditorApplication.hierarchyChanged += Register;
            GenerateCode();
        }
        static void HierarchyChanged()
        {
            Register();
        }

        static void Register()
        {
            var distributors = Object.FindObjectsOfType<AtomDistributor>();
            foreach (var distributor in distributors)
            {
                var fields = distributor.GetType().GetFields(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance)
                    .Where(field => IsSyncableAtomType(field))
                    .ToArray();
                if (fields.Length == 0) continue;

                var generatedTypeName = $"{distributor.GetType().Namespace}.SyncAdapterGenerated";
                var syncAdapterType = System.AppDomain.CurrentDomain.GetAssemblies()
                    .SelectMany(a => a.GetTypes())
                    .FirstOrDefault(t => t.FullName == generatedTypeName);
                if (syncAdapterType == null)
                {
                    continue;
                }
                if(distributor.gameObject.GetComponentsInChildren(syncAdapterType).Length > 0)
                {
                    continue;
                }
                // 子オブジェクトに追加する
                var syncAdapter = new GameObject("SyncAdapter").AddComponent(syncAdapterType);
                syncAdapter.transform.parent = distributor.transform;
            }   
        }

        
        static void GenerateCode()
        {
            var distributors = Object.FindObjectsOfType<AtomDistributor>();

            foreach (var distributor in distributors)
            {
                var fields = distributor.GetType().GetFields(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
                var atomFields = fields
                    .Where(field => IsSyncableAtomType(field))
                    .ToArray();

                var nameSpace = distributor.GetType().Namespace;
                var outputPath = GetOutputPath(distributor, "SyncAdapterGenerated");

                var generatedCode = GenerateCodeFromTemplate(nameSpace, atomFields.Select(field => (field.FieldType.Name, field.Name, GetAtomValueType(field))).ToArray());
                Directory.CreateDirectory(Path.GetDirectoryName(outputPath));
                File.WriteAllText(outputPath, generatedCode);
                AssetDatabase.Refresh();
            }
        }

        private static bool IsSyncableAtomType(FieldInfo field)
        {
            var baseTypes = field.FieldType.GetBaseTypes()
                .TakeWhile(type => type != typeof(UdonSharpBehaviour));
            return baseTypes.Contains(typeof(Atom)) && baseTypes.FirstOrDefault(type => AtomTypes.IsSyncableAtomType(type.Name)) != null;
        }
        private static string GetAtomValueType(FieldInfo field)
        {
            var atomType = field.FieldType.GetBaseTypes().First(type => AtomTypes.IsAtomType(type.Name))?.Name;
            return atomType != null ? AtomTypes.FromAtomType(atomType) : null;
        }

        private static string GetOutputPath(AtomDistributor distributor, string className)
        {
            var script = MonoScript.FromMonoBehaviour(distributor);
            var path = AssetDatabase.GetAssetPath(script);
            var directory = Path.GetDirectoryName(path);
            return Path.Combine(directory, $"{className}.cs");
        }

        private static string GeneratedCodeAnnotationPrefix = @"/*

    DO NOT MODIFY THIS FILE!

    THIS FILE IS GENERATED BY JP.Notek.AtomicSoup.Editor.AtomSourceGenerator.
*/";
        static string GenerateCodeFromTemplate(string modelNameSpace, (string atomFieldType, string atomFieldName, string valueType)[] fields) =>
            $@"{GeneratedCodeAnnotationPrefix}
using JP.Notek.AtomicSoup;
using UdonSharp;
using UnityEngine;
using VRC.SDK3.Data;
using VRC.SDKBase;
using VRC.Udon.Common;

namespace {modelNameSpace}
{{
    [UdonSharpProgramAsset]
    public class SyncAdapterGenerated : AtomSubscriberForSync
    {{
{string.Join("\n", from field in fields
 select $"        [DIInject, SubscribeAtom] public {field.atomFieldType} {field.atomFieldName};")}
{string.Join("\n", from field in fields
 select $"        [UdonSynced] public {field.valueType} {field.atomFieldName}Synced;")}
        protected override void ReflectAtomToUdonSynced()
        {{
{string.Join("\n", from field in fields
 select $"            {field.atomFieldName}Synced = {field.atomFieldName}.Value;")}
        }}

        protected override void ReflectUdonSyncedToAtom()
        {{
{string.Join("\n", from field in fields
 select $"            {field.atomFieldName}.Set({field.atomFieldName}Synced);")}
        }}
    }}
}}";
    }
}
#endif